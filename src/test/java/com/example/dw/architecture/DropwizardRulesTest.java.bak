package com.example.dw.architecture;

import static com.tngtech.archunit.lang.syntax.ArchRuleDefinition.classes;

import com.codahale.metrics.health.HealthCheck;
import com.tngtech.archunit.core.domain.JavaClasses;
import com.tngtech.archunit.core.importer.ClassFileImporter;
import com.tngtech.archunit.lang.ArchRule;
import io.dropwizard.core.Configuration;
import jakarta.ws.rs.DELETE;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.POST;
import jakarta.ws.rs.PUT;
import jakarta.ws.rs.ext.ExceptionMapper;
import jakarta.ws.rs.ext.Provider;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

@DisplayName("Dropwizard Rules")
class DropwizardRulesTest {

  private static JavaClasses importedClasses;

  @BeforeAll
  static void setup() {
    importedClasses =
        new ClassFileImporter()
            .withImportOption(location -> !location.contains("/test-classes/"))
            .importPackages("com.example.dw");
  }

  @Test
  @DisplayName("Health checks should extend HealthCheck")
  void healthChecksShouldExtendHealthCheck() {
    ArchRule rule =
        classes()
            .that()
            .resideInAPackage("..health..")
            .and()
            .haveSimpleNameContaining("Health")
            .should()
            .beAssignableTo(HealthCheck.class)
            .because("Health check classes should extend Dropwizard's HealthCheck");

    rule.check(importedClasses);
  }

  @Test
  @DisplayName("Exception mappers should be annotated with @Provider")
  void exceptionMappersShouldBeAnnotatedWithProvider() {
    ArchRule rule =
        classes()
            .that()
            .areAssignableTo(ExceptionMapper.class)
            .should()
            .beAnnotatedWith(Provider.class)
            .because("Exception mappers must be annotated with @Provider for JAX-RS registration");

    rule.check(importedClasses);
  }

  @Test
  @DisplayName("Resources should use proper HTTP method annotations")
  void resourcesShouldUseProperHttpMethodAnnotations() {
    ArchRule rule =
        classes()
            .that()
            .resideInAPackage("..resources..")
            .and()
            .areNotMemberClasses()
            .should()
            .haveMethodsThat()
            .areAnnotatedWith(GET.class)
            .or()
            .areAnnotatedWith(POST.class)
            .or()
            .areAnnotatedWith(PUT.class)
            .or()
            .areAnnotatedWith(DELETE.class)
            .because("Resource classes should have methods with proper HTTP method annotations");

    rule.check(importedClasses);
  }

  @Test
  @DisplayName("Configuration classes should extend Configuration")
  void configurationClassesShouldExtendConfiguration() {
    ArchRule rule =
        classes()
            .that()
            .haveSimpleNameEndingWith("Configuration")
            .and()
            .areNotInterfaces()
            .should()
            .beAssignableTo(Configuration.class)
            .because("Configuration classes should extend Dropwizard's Configuration class");

    rule.check(importedClasses);
  }

  @Test
  @DisplayName("Application classes should follow proper structure")
  void applicationClassesShouldFollowProperStructure() {
    ArchRule rule =
        classes()
            .that()
            .haveSimpleNameEndingWith("Application")
            .should()
            .beAssignableTo(io.dropwizard.core.Application.class)
            .because("Application classes should extend Dropwizard's Application class");

    rule.check(importedClasses);
  }

  @Test
  @DisplayName("Managed objects should implement Managed interface")
  void managedObjectsShouldImplementManagedInterface() {
    ArchRule rule =
        classes()
            .that()
            .haveSimpleNameContaining("Managed")
            .and()
            .areNotInterfaces()
            .should()
            .beAssignableTo(io.dropwizard.lifecycle.Managed.class)
            .because(
                "Managed objects should implement Dropwizard's Managed interface for lifecycle management");

    rule.check(importedClasses);
  }
}
